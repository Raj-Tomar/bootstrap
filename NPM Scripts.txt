To Automate Some Tasks Install Below Modules:
=======================================================

OnChange Module/ Watch Module
	npm install --save-dev onchange@3.3.0 parallelshell@3.0.2
	
	Inside Script tag:
		for Mac 	: "watch:scss": "onchange 'css/*.scss' npm run scss"
					: "watch:all": "parallelshell 'npm run watch:scss' 'npm run lite'"
					
		for Windows : "watch:scss": "onchange \"css/*.scss\" -- npm run scss"
					:  "watch:all": "parallelshell \"npm run watch:scss\" \"npm run lite\""
					
		
--------------------------------------------------------
Parralel shells Module

	npm install --save-dev parallelshell@3.0.2

--------------------------------------------------------
Objectives and Outcomes
In this exercise, you will learn to set up NPM scripts by modifying the package.json file. At the end of this exercise, you will be able to:

Watch for changes to the styles.scss file and automatically compile it to the css file.
Run multiple NPM scripts in parallel using parallelshell NPM module.
Moving JS to Script file
Create a folder named js and in that folder create a file named scripts.js.
Open index.html and from this file cut out all the JQuery script that we added to it and move the code to the scripts.js file that we created above.
Then, update the index.html file to include the scripts.js file by adding the following line:
	<script src="js/scripts.js"></script>
	
Add the same line to the scripts block in aboutus.html and contactus.html:

Watching for Changes and Parallelshell
First, we install two NPM packages onchange and parallelshell as follows:
	npm install --save-dev onchange@3.3.0 parallelshell@3.0.2 (parallelshell@3.0.2 version has some issue)
		OR
	npm install --save-dev onchange@3.3.0 parallelshell@3.0.1
	
Then, add the following two script items to package.json if you are doing the exercise on a MacOS computer or a Linux computer:
	"watch:scss": "onchange 'css/*.scss' -- npm run scss",
    "watch:all": "parallelshell 'npm run watch:scss' 'npm run lite'"
	
NOTE: If you are doing the exercise on a Windows computer, please use the following two script items instead of the above:
	"watch:scss": "onchange \"css/*.scss\" -- npm run scss",
    "watch:all": "parallelshell \"npm run watch:scss\" \"npm run lite\""
	
You will also update the start script as follows:
	 "start": "npm run watch:all",
	 

Then, type the following at the prompt to start watching for changes to the SCSS file, compile it to CSS, and run the server:
	npm start
	
Now, whenever you make any changes to styles.scss file, it will automatically be compiled to the corresponding css file.
	



============================================================================================
Objectives and Outcomes
In this exercise you will learn to build a distribution folder containing the files that can be deployed on a web server hosting your project. This distribution folder would be built from your project files using various NPM packages and scripts. At the end of this exercise, you will be able to:

Clean out a folder using the clean NPM module.
Copy files from one folder to another
Prepare a minified and concatenated css file from all the css files used in your project
Prepare an uglified and concatenated JS file containing all the JS code used in your project
Cleaning up a Distribution Folder

Install the rimraf npm module by typing the following at the prompt:
	npm install --save-dev rimraf@2.6.2
	
Then, set up the following script:
	 "clean": "rimraf dist",
	 
Copying Fonts
Your project uses font-awesome fonts. These need to be copied to the distribution folder. 
To help us do this, install the copyfiles NPM module globally as follows:
	npm -g install copyfiles@2.0.0
	
Remember to use sudo on mac and Linux.

Then set up the following script:
	 "copyfonts": "copyfiles -f node_modules/font-awesome/fonts/* dist/fonts",

Compressing and Minifying Images

We use the imagemin-cli NPM module to help us to compress our images to reduce the size of the images being used in our project. 
Install the imagemin-cli module as follows:
	npm -g install imagemin-cli@3.0.0

Remember to use sudo on mac and Linux. 
NOTE: Some students have encountered issues with imagemin-cli not installing its plugins due to issues with global permissions on Mac. 
In that case try
	sudo npm install -g imagemin-cli@3.0.0 --unsafe-perm=true --allow-root

Then set up the following script:
	"imagemin": "imagemin img/* --out-dir='dist/img'",
	
Preparing the Distribution Folder
Open .gitignore and update it as follows. 
We do not want the dist folder to be checked into the git repository.
	node_modules
	dist

Then, install the usemin-cli, cssmin, uglifyjs and htmlmin NPM packages as follows:
	npm install --save-dev usemin-cli@0.5.1 cssmin@0.4.3 uglifyjs@2.4.11 htmlmin@0.0.7
	
Add the following two scripts to the package.json file:
	"usemin": "usemin contactus.html -d dist --htmlmin -o dist/contactus.html && usemin aboutus.html -d dist --htmlmin -o dist/aboutus.html && usemin index.html -d dist --htmlmin -o dist/index.html",
    "build": "npm run clean && npm run imagemin && npm run copyfonts && npm run usemin"
	
	
Open index.html and surround the css links inclusion code as follows:
	<!-- build:css css/main.css -->
    <link rel="stylesheet" href="node_modules/bootstrap/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="node_modules/font-awesome/css/font-awesome.min.css">
    <link rel="stylesheet" href="node_modules/bootstrap-social/bootstrap-social.css">
    <link href="css/styles.css" rel="stylesheet">
    <!-- endbuild -->
	

Do the same change in aboutus.html and contactus.html
Similarly, open index.html and surround the js script inclusion code as follows:
	<!-- build:js js/main.js -->
    <script src="node_modules/jquery/dist/jquery.slim.min.js"></script>
    <script src="node_modules/popper.js/dist/umd/popper.min.js"></script>
    <script src="node_modules/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="js/scripts.js"></script>
    <!-- endbuild -->
	
Do the same change in aboutus.html and contactus.html
To build the distribution folder, you can type the following at the prompt:
	npm run build
	
This will build the dist folder containing the files that are a self-contained version of your project. 
You can now copy the contents of this folder to a web server that hosts your website.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Objectives and Outcomes
In this exercise you will learn to build a distribution folder containing the files that can be deployed on a web server hosting your project. This distribution folder would be built from your project files using various NPM packages and scripts. At the end of this exercise, you will be able to:

	Clean out a folder using the clean NPM module.
	Copy files from one folder to another
	Prepare a minified and concatenated css file from all the css files used in your project
	Prepare an uglified and concatenated JS file containing all the JS code used in your project
	
Cleaning up a Distribution Folder
	Install the rimraf npm module by typing the following at the prompt:
		npm install --save-dev rimraf@2.6.2
	Then, set up the following script:
		"clean": "rimraf dist",

Copying Fonts
	Your project uses font-awesome fonts. These need to be copied to the distribution folder. To help us do this, install the copyfiles NPM module globally as follows:
		npm -g install copyfiles@2.0.0

Remember to use sudo on mac and Linux.

	Then set up the following script
		"copyfonts": "copyfiles -f node_modules/font-awesome/fonts/* dist/fonts",


Compressing and Minifying Images

	We use the imagemin-cli NPM module to help us to compress our images to reduce the size of the images being used in our project. Install the imagemin-cli module as follows:
		npm -g install imagemin-cli@3.0.0
		

Remember to use sudo on mac and Linux. 
NOTE: Some students have encountered issues with imagemin-cli not installing its plugins due to issues with global permissions on Mac. In that case try
	sudo npm install -g imagemin-cli@3.0.0 --unsafe-perm=true --allow-root
	
	Then set up the following script:
		"imagemin": "imagemin img/* --out-dir='dist/img'",

Preparing the Distribution Folder
	
	Open .gitignore and update it as follows. We do not want the dist folder to be checked into the git repository.
		node_modules
		dist
	
	Then, install the usemin-cli, cssmin, uglifyjs and htmlmin NPM packages as follows:
		npm install --save-dev usemin-cli@0.5.1 cssmin@0.4.3 uglifyjs@2.4.11 htmlmin@0.0.7
		
	Add the following two scripts to the package.json file:
		"usemin": "usemin contactus.html -d dist --htmlmin -o dist/contactus.html && usemin aboutus.html -d dist --htmlmin -o dist/aboutus.html && usemin index.html -d dist --htmlmin -o dist/index.html",
		"build": "npm run clean && npm run imagemin && npm run copyfonts && npm run usemin"

	Open index.html and surround the css links inclusion code as follows:
		<!-- build:css css/main.css -->
		<link rel="stylesheet" href="node_modules/bootstrap/dist/css/bootstrap.min.css">
		<link rel="stylesheet" href="node_modules/font-awesome/css/font-awesome.min.css">
		<link rel="stylesheet" href="node_modules/bootstrap-social/bootstrap-social.css">
		<link href="css/styles.css" rel="stylesheet">
		<!-- endbuild -->
	
	Do the same change in aboutus.html and contactus.html
	Similarly, open index.html and surround the js script inclusion code as follows:
		<!-- build:js js/main.js -->
		<script src="node_modules/jquery/dist/jquery.slim.min.js"></script>
		<script src="node_modules/popper.js/dist/umd/popper.min.js"></script>
		<script src="node_modules/bootstrap/dist/js/bootstrap.min.js"></script>
		<script src="js/scripts.js"></script>
		<!-- endbuild -->
		
	Do the same change in aboutus.html and contactus.html
	To build the distribution folder, you can type the following at the prompt:
		npm run build
		
This will build the dist folder containing the files that are a self-contained version of your project. 
You can now copy the contents of this folder to a web server that hosts your website.
After verifying that the dist folder is built correctly, you can now do a git commit with the message "NPM Scripts Part 2"
	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
Grunt
-----------------------------------------------------------------------------------------------------------------------------

Grunt Part 1

Objectives and Outcomes
In this exercise, you will learn to use Grunt, the task runner. You will install Grunt CLI and install Grunt packages using NPM. Thereafter you will configure a Grunt file with a set of tasks to build and serve your web project. At the end of this exercise, you will be able to:

	Install Grunt CLI and Grunt packages in your project
	Configure a Grunt file with a set of tasks to build a web project from a source, and serve the built project using a server.
	
Installing Grunt
	At the command prompt, type the following to install Grunt command-line interface (CLI):
		npm install -g grunt-cli@1.2.0
	
This will install the Grunt CLI globally so that you can use them in all projects.

	Next install Grunt to use within your project. To do this, go to the conFusion folder and type the following at the prompt:
		npm install grunt@1.0.2 --save-dev
		

Creating a Grunt File
	Next you need to create a Grunt file containing the configuration for all the tasks to be run when you use Grunt. To do this, create a file named Gruntfile.js in the conFusion folder.
	Next, add the following code to Gruntfile.js to set up the file to configure Grunt tasks:
		
		'use strict';

		module.exports = function (grunt) {
		  // Define the configuration for all the tasks
		  grunt.initConfig({

		  });
		};
		
	This sets up the Grunt module ready for including the grunt tasks inside the function above.
	
Compiling SCSS to CSS
	Next, we are going to set up our first Grunt task. The SASS task converts the SCSS code to CSS. To do this, you need to include some Grunt modules that help us with the tasks. Install the following modules by typing the following at the prompt:
		npm install grunt-sass@2.1.0 --save-dev
		npm install time-grunt@1.4.0 --save-dev
		npm install jit-grunt@0.10.0 --save-dev


The first one installs the Grunt module for SCSS to CSS conversion. 
The time-grunt module generates time statistics about how much time each task consumes, 
and jit-grunt enables us to include the necessary downloaded Grunt modules when needed for the tasks.

	Now, configure the SASS task in the Gruntfile as follows, by including the code inside the function in Gruntfile.js:

		'use strict';

		module.exports = function (grunt) {
			// Time how long tasks take. Can help when optimizing build times
			require('time-grunt')(grunt);

			// Automatically load required Grunt tasks
			require('jit-grunt')(grunt);

			// Define the configuration for all the tasks
			grunt.initConfig({
				sass: {
					dist: {
						files: {
							'css/styles.css': 'css/styles.scss'
						}
					}
				}
			});

			grunt.registerTask('css', ['sass']);

		};

	Now you can run the grunt SASS task by typing the following at the prompt:
		grunt css
		

Watch and Serve Tasks
	The final step is to use the Grunt modules watch and browser-sync to spin up a web server and keep a watch on the files and automatically reload the browser when any of the watched files are updated. To do this, install the following grunt modules:
	
		npm install grunt-contrib-watch@1.0.0 --save-dev
		npm install grunt-browser-sync@2.2.0 --save-dev
	
	After this, we will configure the browser-sync and watch tasks by adding the following code to the Grunt file:
		,
        watch: {
            files: 'css/*.scss',
            tasks: ['sass']
        },
        browserSync: {
            dev: {
                bsFiles: {
                    src : [
                        'css/*.css',
                        '*.html',
                        'js/*.js'
                    ]
                },
                options: {
                    watchTask: true,
                    server: {
                        baseDir: "./"
                    }
                }
            }
        }
	
	Then add the following task to the Grunt file:
	
		grunt.registerTask('default', ['browserSync', 'watch']);
		
	
	Now if you type the following at the command prompt, it will start the server, and open the web page in your default browser. 
	It will also keep a watch on the files in the css folder, and if you update any of them, 
	it will compile the scss file into css file and load the updated page into the browser (livereload)
	
		grunt
		
	Do a Git commit with the message "Grunt Part 1".
	
-----------------------------------------------------------------------------------------------------------------------------

Grunt Part 2

Objectives and Outcomes
In this exercise, you will continue to learn to use Grunt, the task runner. You will configure the Grunt file with a set of additional tasks to build your web project. At the end of this exercise, you will be able to:

	Configure a Grunt file with a set of tasks to build your web project from a source.
	
Copying the Files and Cleaning Up the Dist Folder
	Next you will install the Grunt modules to copy over files to a distribution folder named dist, and clean up the dist folder when needed. 
	To do this, install the following Grunt modules:
		
		npm install grunt-contrib-copy@1.0.0 --save-dev
		npm install grunt-contrib-clean@1.1.0 --save-dev
	You will now add the code to perform the copying of files to the dist folder, and cleaning up the dist folder. To do this, add the following code to Gruntfile.js. 
	This should be added right after the configuration of the SASS task.:
	
		,

        copy: {
            html: {
                files: [
                {
                    //for html
                    expand: true,
                    dot: true,
                    cwd: './',
                    src: ['*.html'],
                    dest: 'dist'
                }]                
            },
            fonts: {
                files: [
                {
                    //for font-awesome
                    expand: true,
                    dot: true,
                    cwd: 'node_modules/font-awesome',
                    src: ['fonts/*.*'],
                    dest: 'dist'
                }]
            }
        },

        clean: {
            build: {
                src: [ 'dist/']
            }
        }
		,
		
	Remember to add the comma after the end of the SASS task.
	

Compressing and Minifying Images
	
	Next we install the grunt-contrib-imagemin module and use it to process the images. To install this module type at the prompt:
	
		npm install grunt-contrib-imagemin@2.0.1 --save-dev
	
	Then, configure the imagemin task as shown below in the Gruntfile:
	
		,
        imagemin: {
            dynamic: {
                files: [{
                    expand: true,                  // Enable dynamic expansion
                    cwd: './',                   // Src matches are relative to this path
                    src: ['img/*.{png,jpg,gif}'],   // Actual patterns to match
                    dest: 'dist/'                  // Destination path prefix
                }]
            }
        }
		,
		
Preparing the Distribution Folder and Files
	
	We are now going to use the Grunt usemin module together with concat, cssmin, uglify and filerev to prepare the distribution folder. 
	To do this, install the following Grunt modules:
		
		npm install grunt-contrib-concat@1.0.1 --save-dev
		npm install grunt-contrib-cssmin@2.2.1 --save-dev
		npm install grunt-contrib-htmlmin@2.4.0 --save-dev
		npm install grunt-contrib-uglify@3.3.0 --save-dev
		npm install grunt-filerev@2.3.1 --save-dev
		npm install grunt-usemin@3.1.1 --save-dev
	
	Next, update the task configuration within the Gruntfile.js with the following additional code to introduce the new tasks:
	
		,

        useminPrepare: {
            foo: {
                dest: 'dist',
                src: ['contactus.html','aboutus.html','index.html']
            },
            options: {
                flow: {
                    steps: {
                        css: ['cssmin'],
                        js:['uglify']
                    },
                    post: {
                        css: [{
                            name: 'cssmin',
                            createConfig: function (context, block) {
                            var generated = context.options.generated;
                                generated.options = {
                                    keepSpecialComments: 0, rebase: false
                                };
                            }       
                        }]
                    }
                }
            }
        },

        // Concat
        concat: {
            options: {
                separator: ';'
            },
  
            // dist configuration is provided by useminPrepare
            dist: {}
        },

        // Uglify
        uglify: {
            // dist configuration is provided by useminPrepare
            dist: {}
        },

        cssmin: {
            dist: {}
        },

        // Filerev
        filerev: {
            options: {
                encoding: 'utf8',
                algorithm: 'md5',
                length: 20
            },
  
            release: {
            // filerev:release hashes(md5) all assets (images, js and css )
            // in dist directory
                files: [{
                    src: [
                        'dist/js/*.js',
                        'dist/css/*.css',
                    ]
                }]
            }
        },
  
        // Usemin
        // Replaces all assets with their revved version in html and css files.
        // options.assetDirs contains the directories for finding the assets
        // according to their relative paths
        usemin: {
            html: ['dist/contactus.html','dist/aboutus.html','dist/index.html'],
            options: {
                assetsDirs: ['dist', 'dist/css','dist/js']
            }
        },

        htmlmin: {                                         // Task
            dist: {                                        // Target
                options: {                                 // Target options
                    collapseWhitespace: true
                },
                files: {                                   // Dictionary of files
                    'dist/index.html': 'dist/index.html',  // 'destination': 'source'
                    'dist/contactus.html': 'dist/contactus.html',
                    'dist/aboutus.html': 'dist/aboutus.html',
                }
            }
        }
		,
		
	
	Next, update the jit-grunt configuration as follows, to inform it that useminPrepare task depends on the usemin package:
		
		require('jit-grunt')(grunt, {
		  useminPrepare: 'grunt-usemin'
		});
		
	
	Next, update the Grunt build task as follows:
	
			grunt.registerTask('build', [
				'clean',
				'copy',
				'imagemin',
				'useminPrepare',
				'concat',
				'cssmin',
				'uglify',
				'filerev',
				'usemin',
				'htmlmin'
			]);
	
	
	Now if you run Grunt, it will create a dist folder with the files structured correctly to be distributed to a server to host your website. 
	To do this, type the following at the prompt:
	
		grunt build

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
